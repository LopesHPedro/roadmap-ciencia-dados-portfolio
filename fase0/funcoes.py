# Fun√ß√µes

"""
Benef√≠cios das fun√ß√µes 
	- Aumentam a legibilidade do c√≥digo
	- Aumentam a reusabilidade do c√≥digo 
"""
# Declarando uma fun√ß√£o
# def √© uma keyword(palavra reservada)
def name_of_function(parameter):
	# Instru√ß√µes a serem realizadas
	return # Express√£o que pode ser retornada

"""
Existem dois tipos de fun√ß√£o:
	- As fun√ß√µes "Built-in", fun√ß√µes padr√£o do Python que est√£o dispon√≠veis,
alguns exemplos: print(), input(),int()...
	- As fun√ß√µes criadas pelos desenvolvedores: podemos criar nossas pr√≥p≈ïias fun√ß√µes
como veremos a seguir.
"""

# Criando uma fun√ß√£o 
    # Nome da fun√ß√£o
def print_salutations():
	   print('Seja bem-vindo ao meu c√≥digo!')
        # Instru√ß√£o a ser realizada

# Chamando uma fun√ß√£o
print_salutations()

# Fun√ß√£o com par√¢metros
# Uma fun√ß√£o pode receber par√¢metros
def calcualte_double(number:int):
    # No caso number seria o par√¢metro e :int o tipo de dado
    double = number * 2 
    print(double)

# Argumentos, s√£o os valores passados nas fun√ß√µes
calcualte_double(8)
               # ^ No caso 8 seria um argumento

# Tipos de Argumentos: default, keyword, positional & arbitrary

# default argument
# O argumento tem um valor padr√£o pr√©-definido
def greetings(name='visitor'):
    print(f'Welcome, {name}!')

greetings() 
# Caso n√£o seja passado argumento ele imprime o valor padr√£o

# positional argument
# Argumentos passados na ordem exata dos par√¢metros
def name_and_age(name, age):
    print(f'Seu nome √© {name} e sua idade √© {age}')

name_and_age("Lopes", 27) # Aqui a ordem importa

# keyword argument
# O par√¢metro √© nomeado ao passar o argumento
name_and_age(age=27, name="Lopes") # Aqui a ordem n√£o importa

# arbitrary argument: *args & **kwargs
# *args                             # veremos o que s√£o tuplas futuramente!    
# Permite passar v√°rios positional arguments como tuplas
def total(*numbers):
    print(sum(numbers))

total(1,2,3)

# **kwargs                             # veremos o que s√£o dicion√°rios futuramente!    
# Permite passar v√°rios keywords arguments como dicion√°rios
def show_info(**data):
    for key, value in data.items():
        print(f'{key}: {value}')

show_info(name='Lopes', age=27)

# Docstring
# A primeia string ap√≥s uma func√£o √© chamada de Document string
# ou Docstring de maneira abreviada, e ela √© usada para descrever
# a funcionalidade da func√£o
# ‚ö†Ô∏è seu uso √© opcional mas √© considerado uma boa pr√°tica!

def calisthenics():
    """This function prints 'Calistenia √© demais!'"""
    print('Calistenia √© demais!')

print(calisthenics.__doc__)

# Function with a Function
# Fun√ß√£o internar ou at√© mesmo Fun√ß√£o aninhada, √© quando
# uma fun√ß√£o tem outra fun√ß√£o dentro de si.
def prepare_travel(destination):
    backpack = ['Barraca', "Garrafa d'√°gua", 'frutas', 'protetor solar']
    
    def checklist(): # essa seria a fun√ß√£o interna
        print(f'\nVamos para {destination} üåÑ')
        print('Voc√™ vai precisar dos seguintes items:')
        for item in backpack:
            print(f'- {item}')
    
    checklist() # chamada direta da fun√ß√£o interna
    
prepare_travel('Trindade')

# Anonymous Functions (lambda)
# Fun√ß√£o sem nome, normalmente usada para coisas simples e r√°pidas.
half = lambda x: (x/2)
print(half(5))

# Recursive Functions
# S√£o fun√ß√µes que chamam elas mesmas, √∫til para problemas 
# matem√°ticos ou recursivos, um bom exemplo de seu uso s√£o fatorias
def factorial(n):
    if n == 0:  
        return 1 # Caso base(condi√ß√£o de parada) evita loop infinito
    else:
        return n * factorial(n - 1) # Caso recursivo, a fun√ß√£o se chama novamente

print(factorial(4))

# Return statement
# Serve para retornar um valor da fun√ß√£o
def difference(a,b):
    return a - b
    
result = difference(10, 8)
print(result)

# Pass by reference
def change_list(list1):
     list1.append(99) # Muda a lista

my_list = [1, 2, 3]
print()
"""
‚úÖ Mut√°veis ‚Üí D√° pra mudar o conte√∫do:

    list ‚Üí listas

    dict ‚Üí dicion√°rios

    set ‚Üí conjuntos

    bytearray
"""

# Pass by value 
def altera_numero(num):
    num = 99  # S√≥ muda a c√≥pia

meu_numero = 1
altera_numero(meu_numero)
print(meu_numero)  # Resultado: 1
"""
‚ùå Imut√°veis ‚Üí N√£o d√° pra mudar, s√≥ criar outro:

    int ‚Üí inteiros

    float ‚Üí decimais

    str ‚Üí strings

    tuple ‚Üí tuplas

    frozenset ‚Üí conjuntos congelados

    bool ‚Üí booleanos

    bytes ‚Üí sequ√™ncia de bytes
"""


# üîó Refer√™ncias:
# https://www.geeksforgeeks.org/python-functions/