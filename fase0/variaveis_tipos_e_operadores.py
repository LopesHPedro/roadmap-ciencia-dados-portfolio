"""
Pense em vari√°veis como caixas onde voc√™ pode armazenar valores.

Regras para nomear vari√°veis:
- Devem conter apenas caracteres alfanum√©ricos e underscores (_)
- Devem come√ßar com uma letra ou underscore
- S√£o **case-sensitive** (ex: nome, Nome e NOME s√£o diferentes)
- N√£o podem usar palavras reservadas do Python
- Bons nomes tornam o c√≥digo mais leg√≠vel (boa pr√°tica, n√£o regra)
"""

# Como criar uma vari√°vel?
name_of_variable = "Lopes"  # strings usam aspas simples ou duplas

number = 27                 # n√∫meros inteiros ou decimais sem aspas
age = lucky_number = 27     # m√∫ltiplas vari√°veis com o mesmo valor

# Liberando espa√ßo de mem√≥ria:
del number

# Permitindo que o usu√°rio insira dados
write_a_sentence = input("Digite seu texto aqui: ")
# ‚ö†Ô∏è Toda entrada pelo input √© do tipo string (str), mesmo que digite um n√∫mero

"""
Assim como diferentes tipos de cal√ßados, temos diferentes tipos de vari√°veis.
"""

# Como descobrir o tipo de uma vari√°vel?
print(type(write_a_sentence))  # <class 'str'>
# ^ Provando que toda entrada √© uma String

# Principais tipos em Python:

# Tipos Num√©ricos
inteiro = 10         # int
decimal = 3.14       # float
complexo = 2 + 3j    # complex

# Tipos sequenciais
string = 'strings'  # <class 'str'> ‚Äî pode usar aspas simples ou duplas

lista = ['calistenia', 'gatos', 'natureza', 'p√£o de queijo', 27]  # <class 'list'>
# Uma lista de coisas que eu gosto + meu n√∫mero da sorte (sim, p√£o de queijo √© essencial)

tupla = (1998, 'Itajub√°')  # <class 'tuple'>
# Parecida com lista, mas imut√°vel ‚Äî meus gostos mudam, minha cidade e ano de nascimento n√£o

# Tipo Booleano
blue_eyes = False # Meus olhos n√£o s√£o azuis
brown_eyes = True # Meus olhos s√£o castanhos

# Tipo Conjunto (Set)
lottery_numbers = {23, 56, 12, 4, 30, 7, 27}  # <class 'set'> ‚Äî sem ordem, mut√°veis, sem duplicatas

# Tipo Dicion√°rio
dicionario = {
    'altura': 1.84,
    'idade': 27
}  # dict ‚Äî chave: valor

# Type Casting (convers√µes)
idade_str = str(age)       # int ‚Üí str
peso_float = float("84.0") # str ‚Üí float
numero_int = int(3.99)     # float ‚Üí int (trunca, n√£o arredonda)

# Operadores em Python
# Aritm√©ticos: +, -, *, /, //, %, **
# Usamos para realizar opera√ß√µes matem√°ticas
total = (1 + 1 - 1) * 1 / 1 # Aqui temos as opera√ß√µes b√°sicas (soma, subtra√ß√£o, multiplica√ß√£o e divis√£o)
rounded_division = 5//2 # Divis√£o inteira (descarta as casas decimais) > 2
rest_of_division = 5 % 2 # Resto de divis√£o > 1
exponentiation = 3 ** 2 # 3 elevado a 2 > 9

# Relacionais: ==, !=, >, <, >=, <=
# Usamos para comparar dois valores, se atenderem ao crit√©rio retorna True, sen√£o retorna False
# == compara se dois valores s√£o iguais, != compara se dois valores s√£o diferentes
print('lopes' == 'lopes', 5 != 5) # True False
# > compara se um valor √© maior que outro, < compara se um valor √© menor que outro
print(2 > 5, 4 < 100) # False True
# >= compara se um valor √© maior ou igual a outro, <= compara se um valor √© maior ou igual a outro
print(3 >= 3, 80 >= 10) # True True

# L√≥gicos: and, or, not
# and(e) quando uma coisa e outra precisam ser verdades
age = 27 # Eu tenho 27 E(and)
voterID = True # Eu tenho t√≠tulo de eleitor
can_vote = age >= 18 and voterID # No caso ambas s√£o verdadeiras 
print(can_vote) # Logo eu posso votar (True)

# or(ou) quando √© necess√°rio apenas uma coisa ser verdade
its_hot = False # Embora N√ÉO esteja quente
calisthenics_train_today = True # Eu treinei calistenia
im_thirsty = calisthenics_train_today or its_hot # No caso apenas um √© verdadeiro 
print(im_thirsty) # Ent√£o estou com sede (True)

# not(n√£o) √© a nega√ß√£o de algo(o oposto)
print(not(calisthenics_train_today)) # False

# Atribui√ß√£o: =, +=, -=, *=, /=, etc.
contador = 10 # Atribui um valor ao contador
contador += 5  # Agora contador vale 15
contador *= 2  # Agora contador vale 30
contador /= 15 # Agora contador vale 2
contador -= 2 # Subtrai 2 de 2 > contador vale 0

# üîó Refer√™ncias:
# https://www.geeksforgeeks.org/introduction-to-python/
# https://www.geeksforgeeks.org/python-variables/
# https://www.geeksforgeeks.org/python-operators/
# https://www.geeksforgeeks.org/python-data-types/
